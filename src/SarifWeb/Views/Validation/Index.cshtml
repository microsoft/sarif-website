@{
    ViewBag.Title = "SARIF Validator";
}

<link href="~/css/Home.css" rel="stylesheet" />
<link href="~/js/jqueryui/themes/redmond/jquery-ui.min.css" rel="stylesheet" />
<link href="~/js/jqueryui/themes/redmond/theme.min.css" rel="stylesheet" />
<link href="~/js/jqueryui/jquery-ui.structure.css" rel="stylesheet" />
<link href="~/js/jqueryui/jquery-ui-1.12.icon-font.min.css" rel="stylesheet" />
<link href="~/css/jquery.multiselect.css" rel="stylesheet" />
<link href="~/css/Loader.css" rel="stylesheet" />
<link href="~/css/Validator.css" rel="stylesheet" />

<section id="dropSection" class="content-section gray-section">
    <div id="pageTitle" role="heading" aria-level="1" class="content-section-title">@ViewBag.Title</div>

    <form id="dropForm" role="region" aria-dropeffect="execute" aria-label="Click to browse for your log file" tabindex="0" method="post" action="@Url.Action("ValidateFiles")" class="drop-area">
        <input id="fileInput" name="postedFiles" type="file" style="display: none;">
        <div class="drop-area-text drop-area-text-input">Drop your SARIF file here or click to browse</div>
        <div class="drop-area-text drop-area-text-busy">
            <div class="drop-area-busy">
                <div id="looper">
                    <div class="loader">Loading...</div>
                </div>
                <div id="busyText">
                    Validating&hellip;
                </div>
            </div>
        </div>
        <div class="drop-area-text drop-area-text-complete">Validation complete!</div>
        <div class="drop-area-text drop-area-text-error">Error</div>
    </form>

    <!-- This is a black cover layer that shows when the Browse dialog is up.
         It prevents the user from dragging a file from the dialog to the drop target. -->
    <div id="pageBlanket"></div>
</section>

<section id="validatorSection" role="region" aria-labelledby="pageTitle" class="content-section gray-section">
    <div id="validatorContainer">
        <div id="validatorToolbar" data-disabled>
            <div id="leftToolbarGroup">
                <select id="ruleList" role="combobox" aria-label="Rule list" multiple size="1" disabled>
                    <option value=""></option>
                </select>
                <button id="prevResultButton" aria-label="Previous result" title="Previous result" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-caret-1-n">icon</span>
                </button>
                <div id="resultPosition">
                    <div id="resultPositionCurrent" aria-label="Result number">0</div>
                    <div id="resultPositionSeparator" aria-label="of">/</div>
                    <div id="resultPositionCount">0</div>
                </div>
                <button id="nextResultButton" aria-label="Next result" title="Next result" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-caret-1-s">icon</span>
                </button>
                <div id="ruleDescription"></div>
            </div>
            <div id="rightToolbarGroup">
                <button id="revalidateButton" aria-label="Re-validate log file" title="Re-validate log file" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-arrowrefresh-1-e">icon</span>
                </button>
                <button id="utilitiesButton" aria-label="Utilities menu" title="Utilities menu" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-gear">icon</span>
                </button>
                <div id="ruleFilters" no-data-disabled>
                    <input type="checkbox" id="noteRules" aria-labelledby="noteRulesLabel" title="More ways to improve your SARIF files." />
                    <label id="noteRulesLabel" for="noteRules" class="ui-widget">Additional suggestions</label>
                    <br />
                    <input type="checkbox" id="gitHubRules" aria-labelledby="gitHubRulesLabel" title="Requirements for SARIF files uploaded to GitHub Advanced Security code scanning." value="Gh;Ghas" />
                    <label id="gitHubRulesLabel" for="gitHubRules" class="ui-widget">GitHub ingestion rules</label>
                    <br />
                    <input type="checkbox" id="advSecRules" aria-labelledby="advSecRulesLabel" title="Requirements for SARIF files uploaded to Azure DevOps Advanced Security code scanning." value="Ado" />
                    <label id="advSecRulesLabel" for="advSecRules" class="ui-widget">ADO ingestion rules</label>
                </div>
            </div>
            <ul id="utilitiesMenu">
                <li id="downloadValidationLog"><div>Download validation results</div></li>
                <li>
                    <div>Editor color themes</div>
                    <ul id="utilitiesMenuThemesFlyout">
                        <li class="ui-widget-header"><div>Light</div></li>
                        <li data-value="ace/theme/chrome"><div><span class="ui-icon ui-icon-check"></span>Chrome</div></li>
                        <li data-value="ace/theme/clouds"><div><span class="ui-icon ui-icon-check"></span>Clouds</div></li>
                        <li data-value="ace/theme/crimson_editor"><div><span class="ui-icon ui-icon-check"></span>Crimson Editor</div></li>
                        <li data-value="ace/theme/dawn"><div><span class="ui-icon ui-icon-check"></span>Dawn</div></li>
                        <li data-value="ace/theme/dreamweaver"><div><span class="ui-icon ui-icon-check"></span>Dreamweaver</div></li>
                        <li data-value="ace/theme/eclipse"><div><span class="ui-icon ui-icon-check"></span>Eclipse</div></li>
                        <li data-value="ace/theme/github"><div><span class="ui-icon ui-icon-check"></span>GitHub</div></li>
                        <li data-value="ace/theme/iplastic"><div><span class="ui-icon ui-icon-check"></span>IPlastic</div></li>
                        <li data-value="ace/theme/katzenmilch"><div><span class="ui-icon ui-icon-check"></span>KatzenMilch</div></li>
                        <li data-value="ace/theme/kuroir"><div><span class="ui-icon ui-icon-check"></span>Kuroir</div></li>
                        <li data-value="ace/theme/solarized_light"><div><span class="ui-icon ui-icon-check"></span>Solarized Light</div></li>
                        <li data-value="ace/theme/sqlserver"><div><span class="ui-icon ui-icon-check"></span>SQL Server</div></li>
                        <li data-value="ace/theme/textmate"><div><span class="ui-icon ui-icon-check"></span>TextMate</div></li>
                        <li data-value="ace/theme/tomorrow"><div><span class="ui-icon ui-icon-check"></span>Tomorrow</div></li>
                        <li data-value="ace/theme/xcode"><div><span class="ui-icon ui-icon-check"></span>XCode</div></li>
                        <li class="ui-widget-header"><div><span class="ui-icon ui-icon-check"></span>Dark</div></li>
                        <li data-value="ace/theme/ambiance"><div><span class="ui-icon ui-icon-check"></span>Ambiance</div></li>
                        <li data-value="ace/theme/chaos"><div><span class="ui-icon ui-icon-check"></span>Chaos</div></li>
                        <li data-value="ace/theme/clouds_midnight"><div><span class="ui-icon ui-icon-check"></span>Clouds Midnight</div></li>
                        <li data-value="ace/theme/cobalt"><div><span class="ui-icon ui-icon-check"></span>Cobalt</div></li>
                        <li data-value="ace/theme/dracula"><div><span class="ui-icon ui-icon-check"></span>Dracula</div></li>
                        <li data-value="ace/theme/gob"><div><span class="ui-icon ui-icon-check"></span>Green on Black</div></li>
                        <li data-value="ace/theme/gruvbox"><div><span class="ui-icon ui-icon-check"></span>Gruvbox</div></li>
                        <li data-value="ace/theme/idle_fingers"><div><span class="ui-icon ui-icon-check"></span>idle Fingers</div></li>
                        <li data-value="ace/theme/kr_theme"><div><span class="ui-icon ui-icon-check"></span>krTheme</div></li>
                        <li data-value="ace/theme/merbivore"><div><span class="ui-icon ui-icon-check"></span>Merbivore</div></li>
                        <li data-value="ace/theme/merbivore_soft"><div><span class="ui-icon ui-icon-check"></span>Merbivore Soft</div></li>
                        <li data-value="ace/theme/mono_industrial"><div><span class="ui-icon ui-icon-check"></span>Mono Industrial</div></li>
                        <li data-value="ace/theme/monokai"><div><span class="ui-icon ui-icon-check"></span>Monokai</div></li>
                        <li data-value="ace/theme/solarized_dark"><div><span class="ui-icon ui-icon-check"></span>Solarized Dark</div></li>
                        <li data-value="ace/theme/terminal"><div><span class="ui-icon ui-icon-check"></span>Terminal</div></li>
                        <li data-value="ace/theme/tomorrow_night"><div><span class="ui-icon ui-icon-check"></span>Tomorrow Night</div></li>
                        <li data-value="ace/theme/tomorrow_night_blue"><div><span class="ui-icon ui-icon-check"></span>Tomorrow Night Blue</div></li>
                        <li data-value="ace/theme/tomorrow_night_bright"><div><span class="ui-icon ui-icon-check"></span>Tomorrow Night Bright</div></li>
                        <li data-value="ace/theme/twilight"><div><span class="ui-icon ui-icon-check"></span>Twilight</div></li>
                        <li data-value="ace/theme/vibrant_ink"><div><span class="ui-icon ui-icon-check"></span>Vibrant Ink</div></li>
                    </ul>
                </li>
            </ul>
        </div>
        <div id="editor" role="textbox" aria-label="Log file editor"></div>
        <div id="validatorFooter">
            <div id="resultDetails"></div>
        </div>
    </div>
</section>

<!-- This hidden hyperlink is used by the Download button -->
<a id="downloadLink" style="display: none;">Download</a>

@section Scripts {
    <script src="~/js/ace/ace.js"></script>
    <script src="~/js/jqueryui/jquery-ui.min.js"></script>
    <script src="~/js/jquery.multiselect.min.js"></script>
    <script type="text/javascript">
        $(function () {
            let fileName = "";
            let targetLogText = null;
            let validationLog = null;

            // Rules dictionary: key = rule ID, value = result key}
            let rulesDictionary = {};
            let rulesCount = 0;
            // Results dictionary: key = int, value = { line, message }
            let resultsDictionary = {};

            let currentFile = '';
            let currentRules = [];
            let currentResultLocations = [];
            let currentResultLocationIndex = -1;
            let currentDecorationLine = 0;

            let editor = null;
            const $pageBlanket = $("#pageBlanket");
            const $gitHubRules = $("#gitHubRules");
            $gitHubRules.change(function() { submitValidationRequest(currentFile); });
            const $advSecRules = $("#advSecRules");
            $advSecRules.change(function() { submitValidationRequest(currentFile); });
            const $noteRules = $("#noteRules");
            $noteRules.change(function() { submitValidationRequest(currentFile); });
            let isFileOpening = false;

            const ruleDescriptionTemplate = `<b><a href="{HELPURL}" target="_blank">{RULEID}</a>:</b> {RULEDESC}`;
            const resultDetailTemplate = `<b><a href="{HELPURL}" target="_blank">{RULEID}</a>:</b> {RESULTMSG}`;
            const noErrorsText = "<span class=\"no-errors\">No errors were found during validation!</span>";

            const sarifFileTypeMessage = 'Only .sarif and .sarif.json files are supported.'

            const $toolbar = $("#validatorToolbar");
            const $ruleList = $("#ruleList").multiselect({
                minWidth: 300,
                header: "<input type='checkbox' id='ruleListSelectAll' checked class='ui-multiselect-header-item' /><label for='ruleListSelectAll'></label>",
                noneSelectedText: "Select rules",
                selectedText: "# rule(s) selected",
                click: function (e) {
                    const target = e.currentTarget;

                    if (!$(target).hasClass("ui-multiselect-header-item")) {
                        if (!target.checked) {
                            ruleListSelectAll.checked = false;
                        } else {
                            const checked = $(this).multiselect("getChecked");
                            ruleListSelectAll.checked = checked.length === rulesCount;
                        }
                    }
                },
                beforeclose: function () {
                    currentRules = [];
                    currentResultLocations = [];
                    let count = 0;

                    $.each($(this).multiselect("getChecked"), function (index, option) {
                        // The "select all" checkbox will be included if it's checked, so skip it
                        if (!$(option).hasClass("ui-multiselect-header-item")) {
                            currentRules.push(option.value);
                        }
                    });

                    clearLineMarkers();

                    if (currentRules.length > 0) {
                        $.each(currentRules, function (index, ruleId) {
                            $.each(rulesDictionary[ruleId].resultKeys, function (index, key) {
                                currentResultLocations.push({ ruleIndex: rulesDictionary[ruleId].ruleIndex, resultKey: key });
                                setLineMarker(resultsDictionary[key].line);
                                count++;
                            });
                        });

                        // Sort the result by line number
                        currentResultLocations.sort(function (r1, r2) {
                            return resultsDictionary[r1.resultKey].line - resultsDictionary[r2.resultKey].line;
                        });

                        setResultPositionText(1, count);
                        currentResultLocationIndex = 0;
                        changeCurrentResultLocation();
                    }
                }
            });
            $("#ruleListSelectAll")
                .on("click", function (e) {
                    if (e.target.checked) {
                        $ruleList.multiselect("checkAll");
                    } else {
                        $ruleList.multiselect("uncheckAll");
                    }
                });
            const $ruleDescription = $("#ruleDescription");
            const $resultPositionCurrentText = $("#resultPositionCurrent");
            const $resultPositionCountText = $("#resultPositionCount");
            const $prevResultButton = $("#prevResultButton").button();
            const $nextResultButton = $("#nextResultButton").button();
            const $revalidateButton = $("#revalidateButton").button();
            const $utilitiesButton = $("#utilitiesButton").button();
            const $utilitiesMenu = $("#utilitiesMenu").menu({
                items: "> :not(.ui-widget-header)"
            }).hide();
            const $resultDetails = $("#resultDetails");

            $("#downloadValidationLog").on("click", function () {
                // BUGBUG: issue #83 calls for the file key to be the uploaded filename
                // For now, find the file with the sarif content type
                $.each(validationLog.runs[0].files, function (key, file) {
                    if (file.mimeType === "application/sarif-json") {
                        file.contents = {
                            text: targetLogText
                        }
                        return false; // Break
                    }
                });
                const text = JSON.stringify(validationLog, null, " ");
                const index = fileName.lastIndexOf(".");
                const extension = fileName.substring(index + 1);
                const outputFileName = fileName.substring(0, index) + ".validation." + extension;
                saveTextAsFile(text, outputFileName);
            });

            let theme = getCookie("editorTheme");
            theme = (theme && theme !== "undefined") ? theme : "ace/theme/sqlserver";
            $("#utilitiesMenuThemesFlyout li[data-value='" + theme + "']").addClass("selected-theme");

            let resultKey = 0;
            function addResult(rule, result) {
                if (!rulesDictionary[rule.id]) {
                    rulesDictionary[rule.id] = {
                        // We could just have the results array be the value, but
                        // it reads more clearly as an object with a results property
                        resultKeys: [],
                        ruleIndex: result.ruleIndex
                    };
                    rulesCount++;
                }

                // Get the messageString specified by this result
                let message = rule.messageStrings[result.message.id].text;

                // Replace tokens in the messageString with this result's arguments
                const args = result.message.arguments;
                message = message.replace(/{(\d+)}/g, function (match, number) {
                    return typeof args[number] !== "undefined" ? args[number] : match;
                });

                // Add each location for this result
                $.each(result.locations, function (index, location) {
                    const startLine = location.physicalLocation.region.startLine;
                    const key = ++resultKey;
                    rulesDictionary[result.ruleId].resultKeys.push(key);
                    resultsDictionary[key] = {
                        line: startLine,
                        message
                    };
                });
            }

            // Creates a SARIF log object from JSON, then processes rules and results
            function processResults(sarif) {
                return new Promise(function (resolve, reject) {
                    validationLog = JSON.parse(sarif);
                    processValidationLog();
                    resolve();
                });
            }

            function processValidationLog() {
                rulesDictionary = {};
                resultsDictionary = {};
                clearRuleList();
                setResultPositionText(0, 0);
                setResultLocationDetails();
                setToolbarEnabled(false);
                clearLineMarkers();
                clearGutterDecoration();
                currentResultLocationIndex = -1;

                const run = validationLog.runs[0];
                const gitHubRulesEnabled = $gitHubRules.is(":checked");
                const advSecRulesEnabled = $advSecRules.is(":checked");
                const noteRulesEnabled = $noteRules.is(":checked");

                if (run.results && run.results.length > 0) {
                    let hasResults = false;
                    if (run.tool && run.tool.driver && run.tool.driver.rules) {
                        adjustRuleLevelsForGitHub(run.results, gitHubRulesEnabled);
                        $.each(run.results, function (index, result) {
                            const rule = run.tool.driver.rules[result.ruleIndex];
                            const isGitHub = isGitHubRule(rule);
                            const isNote = isNoteResult(result);
                            if ((!isGitHub && !isNote) ||
                                (isGitHub && gitHubRulesEnabled) ||
                                (isNote && noteRulesEnabled)) {
                                addResult(run.tool.driver.rules[result.ruleIndex], result);
                                hasResults = true;
                            }
                        });

                        if (hasResults) {
                            // Now we know how many result locations we have for each rule, so populate the rules dropdown.
                            const options = [];
                            for (let key in rulesDictionary) {
                                options.push(`<option value='${key}'>${key}" (${rulesDictionary[key].resultKeys.length})</option>`);
                            }

                            // Add the rules to the drop-down and then trigger a close event.
                            $ruleList.append(options.join(""))
                                .multiselect("refresh")
                                .multiselect("checkAll")
                                .multiselect("close");
                        }
                    }
                } else if (run.invocations[0].toolExecutionNotifications.length > 1) {
                    const errorNote = run.invocations[0].toolExecutionNotifications[1];

                    if (errorNote.level === "error") {
                        const toolError = errorNote.message.text;
                        if (toolError) {
                            setTimeout(function () {
                                // Push this to another thread to allow the above settings to take effect
                                alert(toolError);
                            }, 0);
                        } else {
                            $ruleDescription.html(noErrorsText);
                        }
                    }
                }

                setToolbarEnabled(true);
            }

            // This function is a temporary workaround for the fact that we don't yet
            // have an API that adjusts and filters results by a policy. We happen to
            // know that when the "GitHub" checkbox is checked, results for rule
            // SARIF2007.ExpressPathsRelativeToRepoRoot should be treated as errors
            // rather than warnings, and results for rule SARIF2012.ProvideHelpUris
            // should be treated as warnings rather than notes.
            function adjustRuleLevelsForGitHub(results, gitHubRulesEnabled) {
                $.each(results, function (index, result) {
                    switch (result.ruleId) {
                        case 'SARIF2007':
                            result.level = gitHubRulesEnabled ? "error" : "warning";
                            break;
                        case 'SARIF2012':
                            result.level = gitHubRulesEnabled ? "warning" : "note";
                            break;
                    }
                });
            }

            function isGitHubRule(rule) {
                // Rules whose ids begin with "GH" are used to validate SARIF files intended
                // for upload to GitHub Advanced Security code scanning.
                return rule.id.startsWith('GH');
            }

            function isNoteResult(result) {
                let level = "warning";
                if (result.level) {
                    level = result.level;
                }
                return level === "note";
            }

            // Downloads the complete text from the editor
            function saveTextAsFile(text, fileName) {
                const textFileAsBlob = new Blob([text], { type: "text/json" });

                const downloadLink = $("#downloadLink")[0];
                downloadLink.download = fileName + ".sarif";
                downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
                downloadLink.click();

                window.URL.revokeObjectURL(textFileAsBlob);
            }

            // Sets a line marker in the editor
            function setLineMarker(line) {
                const range = new ace.Range(line - 1, 0, line - 1, Infinity);
                range.start = editor.session.doc.createAnchor(range.start);
                range.end = editor.session.doc.createAnchor(range.end);
                range.id = editor.session.addMarker(range, "sarif-error", "text", false);
            }

            // Clears all line markers in the editor
            function clearLineMarkers() {
                const markers = editor.session.getMarkers();
                $.each(markers, function (id) {
                    editor.session.removeMarker(id);
                });
            }

            // Sets a gutter marker at the specified line, and removes the current marker
            function setGutterDecoration(newLine) {
                editor.session.removeGutterDecoration(currentDecorationLine, "sarif-error-gutter");
                currentDecorationLine = newLine;
                editor.session.addGutterDecoration(currentDecorationLine, "sarif-error-gutter");
            }

            // Removes the current gutter marker
            function clearGutterDecoration() {
                editor.session.removeGutterDecoration(currentDecorationLine, "sarif-error-gutter");
                currentDecorationLine = 0;
            }

            function isSarifFile(fileName) {
                const lowerFileName = fileName.toLowerCase();
                return lowerFileName.endsWith('.sarif') || lowerFileName.endsWith('.sarif.json');
            }

            function setUpEditor(logText) {
                return new Promise(function (resolve, reject) {
                    if (!editor) {
                        editor = ace.edit("editor", {
                            mode: "ace/mode/json",
                            theme: $("#utilitiesMenuThemesFlyout li.selected-theme").attr("data-value"),
                            selectionStyle: "text",
                            showPrintMargin: false
                        });

                        editor.session.on("change", function (delta) {
                            if (isFileOpening) {
                                // If a log is already loaded, we'll get a remove event followed by an insert when a subsequent log is opened
                                // If it's an insert, we flip the flag
                                if (delta.action !== "remove") {
                                    isFileOpening = false;
                                }
                            } else {
                                const end = delta.end.row;
                                let lines = delta.lines.length - 1;

                                if (delta.action === "remove") {
                                    lines *= -1;
                                }

                                let log;

                                // Adjust line #s when the document changes
                                $.each(rulesDictionary, function (key, value) {
                                    if (!log) {
                                        log = JSON.stringify(value);
                                    }

                                    $.each(value.resultKeys, function (index, key) {
                                        const result = resultsDictionary[key];
                                        if (result.line >= end) {
                                            result.line += lines;
                                        }
                                    });
                                });

                                if (currentDecorationLine >= end) {
                                    setGutterDecoration(currentDecorationLine + lines);
                                }
                            }
                        });
                    }

                    editor.setValue(logText);
                    editor.selection.clearSelection();

                    // Enable controls
                    setToolbarEnabled(true);
                    resolve();
                });
            }

            function resetFileInput() {
                $fileInput.val(null);
            }

            function resetEditor() {
                if (editor) {
                    editor.setValue("");
                }

                clearRuleList();
                setToolbarEnabled(false);
                setResultPositionText(0, 0);
                setResultLocationDetails();
            }

            function setToolbarEnabled(enable) {
                let verb;
                let selector = "";

                if (enable) {
                    verb = "enable";
                    selector = ":disabled";
                    $toolbar.removeAttr("data-disabled");
                } else {
                    verb = "disable";
                    $toolbar.attr("data-disabled");
                }

                $("#validatorToolbar .toolbar-button" + selector).each(function (index, button) {
                    $(button).button(verb);
                });
                $ruleList.multiselect(verb);
            }

            function clearRuleList() {
                $("#ruleList option").each(function (index, option) {
                    $(option).remove();
                })
                $ruleList.multiselect("refresh");
                setRuleDescription();
            }

            function setResultPositionText(current, count) {
                $resultPositionCurrentText.text(current);

                if (typeof count !== "undefined") {
                    $resultPositionCountText.text(count);
                }
            }

            function submitValidationRequest(file) {
                // Prevent duplicate submissions
                if (file === '' || $dropForm.hasClass("is-busy")) {
                    return false;
                }

                currentFile = file;
                const gitHubRulesEnabled = $gitHubRules.is(":checked");
                const advSecRulesEnabled = $advSecRules.is(":checked");
                isFileOpening = true;
                resetEditor();

                // Confirm if the file is > 20 MB
                if (file.size > (20 * 1024 * 1024)) {
                    if (!confirm("The file you have selected is large, and validating this file could take a long time. Do you want to continue?")) {
                        resetFileInput();
                        return;
                    }
                }

                $dropForm.addClass("is-busy").removeClass("is-complete").removeClass("is-error");

                const ruleKinds = new Array();
                ruleKinds.push('Sarif');
                if (gitHubRulesEnabled) {
                    ruleKinds.push($gitHubRules[0].value);
                }
                if (advSecRulesEnabled) {
                    ruleKinds.push($advSecRules[0].value);
                }
                const formData = new FormData();
                formData.append($fileInput.attr("name"), file);
                formData.append("kinds", ruleKinds.join(';'));

                $.ajax({
                    url: $dropForm.attr("action"),
                    type: $dropForm.attr("method"),
                    data: formData,
                    dataType: "json",
                    cache: false,
                    contentType: false,
                    processData: false,
                    complete: function () {
                        resetFileInput();
                        $dropForm.removeClass("is-busy");
                    },
                    success: function (data) {
                        if (data.standardError === "") {
                            $dropForm.addClass("is-complete");

                            setTimeout(function () {
                                $dropForm.removeClass("is-complete");
                            }, 5000);

                            // Load the JSON as it was formatted by the validator before analysis.
                            setUpEditor(data.inputLogContents)
                                .then(function () {
                                    processResults(data.resultsLogContents);
                                });
                        } else {
                            $dropForm.addClass("is-error");

                            setTimeout(function () {
                                $dropForm.removeClass("is-error");
                            }, 5000);

                            setTimeout(function () {
                                // Wait a tick to let the style change take effect. Don't know why this is needed.
                            }, 100);
                        }
                    },
                    error: function (xmlhttprequest, textstatus, message) {
                        $dropForm.addClass("is-error");
                        const error = textstatus === "timeout" ?
                            "The validation request timed out." :
                            "An unknown error occurred.";
                        alert(error);
                    }
                });
            }

            function setRuleDescription(ruleIndex) {
                $ruleDescription.empty();

                if (ruleIndex !== undefined) {
                    const rule = validationLog.runs[0].tool.driver.rules[ruleIndex];
                    const html = ruleDescriptionTemplate
                        .replace("{RULEID}", rule.id)
                        .replace("{RULEDESC}", (rule))
                        .replace("{HELPURL}", rule.helpUri);
                    $ruleDescription.html(html);
                }
            }

            function getRuleDescription(rule) {
                if (rule) {
                    if (rule.fullDescription) {
                        return rule.fullDescription.text;
                    } else if (rule.shortDescription) {
                        return rule.shortDescription.text;
                    }

                    return '';
                }
            }

            function setResultLocationDetails(resultLocation) {
                $resultDetails.empty();

                if (resultLocation) {
                    const rule = validationLog.runs[0].tool.driver.rules[resultLocation.ruleIndex];
                    const html = resultDetailTemplate
                        .replace("{RULEID}", rule.id)
                        .replace("{RESULTMSG}", resultsDictionary[resultLocation.resultKey].message)
                        .replace("{HELPURL}", rule.helpUri);
                    $resultDetails.html(html);
                }
            }

            function changeCurrentResultLocation() {
                setResultPositionText(currentResultLocationIndex + 1);
                let resultLocation = currentResultLocations[currentResultLocationIndex];
                setRuleDescription(resultLocation.ruleIndex);
                setResultLocationDetails(resultLocation);
                const key = resultLocation.resultKey;
                const line = resultsDictionary[key].line;
                setGutterDecoration(line - 1);

                setTimeout(function () {
                    editor.gotoLine(line, 0, true);
                }, 0);
            }

            function goToPreviousResultLocation() {
                if (currentResultLocationIndex > -1) {
                    if (currentResultLocationIndex > 0) {
                        currentResultLocationIndex--;
                    } else {
                        currentResultLocationIndex = currentResultLocations.length - 1;
                    }

                    changeCurrentResultLocation();
                }
            }

            function goToNextResultLocation() {
                if (currentResultLocationIndex > -1) {
                    if (currentResultLocationIndex < currentResultLocations.length - 1) {
                        currentResultLocationIndex++;
                    } else {
                        currentResultLocationIndex = 0;
                    }

                    changeCurrentResultLocation();
                }
            }

            $(document).on("keyup", function (e) {
                if (e.key === "F7") {
                    goToPreviousResultLocation();
                } else if (e.key === "F8") {
                    goToNextResultLocation();
                }
            });

            $prevResultButton.on("click", function () {
                goToPreviousResultLocation();
            });

            $nextResultButton.on("click", function () {
                goToNextResultLocation();
            });

            $revalidateButton.on("click", function () {
                // Disable controls
                setToolbarEnabled(false);
                $dropForm.addClass("is-busy").removeClass("is-complete").removeClass("is-error");

                $.ajax({
                    url: "@Url.Action("ValidateJson")",
                    type: "POST",
                    data: JSON.stringify(editor.getValue()),
                    dataType: "json",
                    cache: false,
                    contentType: "application/json",
                    processData: false,
                    complete: function () {
                        // Enable controls
                        setToolbarEnabled(true);
                        $dropForm.removeClass("is-busy");
                    },
                    success: function (data) {
                        $dropForm.addClass("is-complete");
                        setTimeout(function () {
                            $dropForm.removeClass("is-complete");
                        }, 5000);
                        processResults(data.resultsLogContents);
                    },
                    error: function (xmlhttprequest, textstatus, message) {
                        $dropForm.addClass("is-error");
                        setTimeout(function () {
                            $dropForm.removeClass("is-error");
                        }, 5000);
                        const error = textstatus === "timeout" ?
                            "The re-validation request timed out." :
                            "An unknown error occurred.";
                        alert(error);
                    }
                });
            });

            $utilitiesButton.button().on("click", function () {
                $utilitiesMenu.show().position({
                    my: "right top",
                    at: "left bottom",
                    of: this,
                    collision: "flip flip",
                    within: "#pageContainer"
                });

                $(document).on("click", function () {
                    $utilitiesMenu.hide();
                }).on("keyup", function (e) {
                    if (e.key === "Escape") {
                        $utilitiesMenu.hide();
                    }
                });

                return false;
            });

            $utilitiesMenu.on("menuselect", function (e, ui) {
                $("#utilitiesMenuThemesFlyout li.selected-theme").removeClass("selected-theme");
                const theme = ui.item.attr("data-value");
                ui.item.addClass("selected-theme");
                editor.setTheme(theme);
                setCookie("editorTheme", theme, 365 * 10);
            });

            const $dropForm = $("#dropForm");
            const $fileInput = $("#fileInput");

            $(window).on("focusin", function () {
                $pageBlanket.hide();
                $("#editor").removeClass("hidden");
            });

            $fileInput.on("change", function (e) {
                const val = $(this).val();

                if (val !== "") {
                    if (!isSarifFile(val)) {
                        alert(sarifFileTypeMessage);
                        $(this).val("");
                    } else {
                        submitValidationRequest($(this)[0].files[0]);
                    }
                }
            });

            $dropForm.on("click", function (e) {
                $("#editor").addClass("hidden");
                $pageBlanket.show();
                $fileInput[0].click();
            })
            .on("keypress", function (e) {
                if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    e.stopPropagation();
                    $fileInput[0].click();
                }
            })
            .on("drag dragstart dragend dragover dragenter dragleave drop", function (e) {
                e.preventDefault();
                e.stopPropagation();
            })
            .on("dragover dragenter", function () {
                $dropForm.addClass("drop-area-active");
            })
            .on("dragleave dragend drop", function () {
                $dropForm.removeClass("drop-area-active");
            })
            .on("drop", function (e) {
                const file = e.originalEvent.dataTransfer.files[0];
                fileInput.files = e.originalEvent.dataTransfer.files;
                if (!isSarifFile(file.name)) {
                    alert(sarifFileTypeMessage);
                } else {
                    submitValidationRequest(file);
                }
            });
        });
    </script>
}